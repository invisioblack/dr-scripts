custom_require.call(%w[common events])

=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smoke
=end

class Smoker
  include DRC

  def initialize
    arg_definitions = [
      [
        { name: 'cigar', regex: /\w+/i, variable: true, description: 'Cigar noun. (Only thing required if using YAML settings.)' }
      ],
      [
        { name: 'image', regex: /\w+/i, variable: true, description: 'Smoke image to learn.' },
        { name: 'cigar', regex: /\w+/i, variable: true, description: 'Cigar noun.' },
        { name: 'container', regex: /\w+/i, variable: true, description: "Cigar's container." },
        { name: 'lighter', regex: /\w+/i, variable: true, description: "Lighter's noun." }
      ]
    ]

    args = parse_args(arg_definitions)

    if args.image
      @image = args.image
      @cigar = args.cigar
      @cigar_container = args.container
      @lighter = args.lighter
    else
      smoke_settings = get_settings.smoke

      @cigar = args.cigar
      @image = smoke_settings['smoke_image'] if smoke_settings['smoke_image']
      @lighter_info = smoke_settings['lighter']
      @cigar_container = smoke_settings['cigar_container']
    end

    Flags.add('new-cig', 'That was the last of your')

    smoke_cig if get_cig? && light_cig?

    Flags.delete('new-cig')
  end

  def get_cig?
    case bput("get #{@cigar} in my #{@cigar_container}", 'You get', 'What were', 'You need')
    when 'What were'
      echo 'Out of cigars, exiting.'
      return false
    end

    true
  end

  def exhale_smoke
    pause 3
    output = 'exhale'
    output = "exhale line #{@image}" if @image
    bput(output.to_s, 'Roundtime')
  end

  def light_cig?
    output = "get my #{@lighter}"
    output = "get #{@lighter_info['type']} in my #{@lighter_info['container']}" unless @lighter_info.empty?

    case bput(output.to_s, 'You get', 'What were', 'You are already')
    when 'What were'
      echo 'No lighter found! Exiting.'
      return false
    end

    if @lighter_info['type'].include?('flint')
      bput("drop my #{@cigar}", 'You drop')
      bput("guard #{@cigar}", 'You are a bit', 'You move into position')
      bput("wield my #{@lighter_info['blade']}", 'You get', 'What were', 'You are already', 'You draw')
    end

    if @lighter
      fput("point my #{@lighter} at #{@cigar}")
      waitrt?
    else
      fput("light #{@cigar} with my #{@lighter_info['type']}")
      waitrt?
      bput("sheath my #{@lighter_info['blade']}", 'You Sheath', 'You put')
      bput("get #{@cigar}", 'You pick up')
    end

    bput("put my #{@lighter_info['type']} in my #{@lighter_info['container']}", 'You put')

    Flags.reset('new-cig')
    true
  end

  def smoke_cig
    inhale_counter = 0
    loop do
      exit if Flags['new-cig']

      if @image
        bput("inhale my #{@cigar}", 'You take', 'What were')
        exhale_smoke
        waitrt?
        fput('smoke list')
      else
        output = "smoke #{@cigar}"
        output = "inhale #{@cigar}" if inhale_counter == 0
        bput(output.to_s, 'You puff', 'You take', 'What were')
        exhale_smoke if inhale_counter == 0
        pause 15
        inhale_counter += 1
        inhale_counter = 0 if inhale_counter > 2
        next
      end
    end
  end
end

Smoker.new
